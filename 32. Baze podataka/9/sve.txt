# PROCEDURA P10 - IF

DELIMITER //
CREATE PROCEDURE p10(IN parametar1 INT) 
BEGIN

DECLARE variable1 INT;
SET variable1 = parametar1 + 1; #uneta vrednost + 1

IF variable1 = 0 THEN
INSERT INTO t VALUES(20);
END IF;

IF parametar1 = 0 THEN
UPDATE t SET s1 = s1 + 1; 
ELSE 
UPDATE t SET s1 = s1 + 2; 
END IF;

END //
DELIMITER ;



CALL p10(0); SELECT * FROM t


#PROCEDURA P11 - CASE

DELIMITER //
CREATE PROCEDURE p11(IN parametar1 INT) 
BEGIN

DECLARE variable1 INT;
SET variable1 = parametar1 + 1; 

CASE variable1 
WHEN 0 THEN 
INSERT INTO t VALUES(17);
WHEN 1 THEN 
INSERT INTO t VALUES(18);
ELSE
INSERT INTO t VALUES(19);
END CASE;

END //
DELIMITER ;


CALL p11(1); SELECT * FROM t


#PROCEDURA P12 - WHILE PETLJA


DELIMITER //
CREATE PROCEDURE p12() 
BEGIN

DECLARE v INT; #brojac
SET v = 0; #inicijalizovali vrednost

WHILE v < 5 DO
INSERT INTO t(s1) VALUES(v);
SET v = v + 1;
END WHILE;

END //
DELIMITER ;

CALL p12(); SELECT * FROM t


-------------------------------------------FUNKCIJE------------------------------------------------------------
#Izracunavanje obima kruga
DELIMITER //
CREATE FUNCTION obimKruga(r double) RETURNS double
DETERMINISTIC 

BEGIN
DECLARE obim double;
SET obim = 2*r*pi();
RETURN obim;

END //
DELIMITER ;

SELECT obimKruga(10)

----------------------------------------TRIGERI------------------------------------------------------------------
#baza trigeri
#Unos stare i nove cene u log product nakon promene cene

DELIMITER //
CREATE TRIGGER before_update_products #naziv trigera
BEFORE # vreme izvršavanja trigera
UPDATE #dogadjaj
ON products #nad kojom tabelom
FOR EACH ROW
BEGIN
INSERT INTO log_products(name, old_price, new_price, created_at)
VALUES(old.name, old.price, new.price, now());
END //
DELIMITER ;

UPDATE products
SET price = 7.65
WHERE id = 1;
---------------------------
#Ograničavanje cene proizvoda na 10

DELIMITER // 
CREATE TRIGGER before_update_products_ogrnicenacena1 BEFORE UPDATE ON products FOR EACH ROW 
BEGIN 
IF new.price > 10 THEN SET new.price = 10;  
INSERT INTO log_products(name, old_price, new_price, created_at) VALUES(old.name, old.price, new.price, now()); 
ELSE 
INSERT into log_products(name, old_price, new_price, created_at) VALUES(old.name, old.price, new.price, now()); 
END IF; 
END // 
DELIMITER ;

UPDATE products
SET price = 15
WHERE id = 1;

#Za dodati novi proizvod ograniciti cenu na 10
DELIMITER // 
CREATE TRIGGER ogranicena_cena 
BEFORE INSERT ON products FOR EACH ROW 
BEGIN 
IF NEW.price > 10 THEN SET NEW.price = 10; 
END IF; 
END //
DELIMITER ;

ili i sa unosom u log_products

DELIMITER // 
CREATE TRIGGER novo 
BEFORE INSERT ON products for EACH ROW 
BEGIN 
IF new.price > 10 THEN SET new.price = 10; 
INSERT INTO log_products(name, old_price, new_price, created_at) VALUES (new.name, 0.0, new.price, now()); 
ELSE 
INSERT INTO log_products(name, old_price, new_price, created_at) VALUES (new.name, 0.0, new.price, now()); 
END IF; 
END // 
DELIMITER ;

INSERT INTO products (name, price, category_id, quantity_aviable) VALUES ("def", 20, 1, 1)

